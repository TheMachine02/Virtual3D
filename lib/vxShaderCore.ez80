vxShaderLoad:
	ld	bc, 0
	ld	c, (ix+1)	; load size
	lea	hl, ix+4	; load shader
	ld	de, VX_PIXEL_SHADER_CODE
	ldir			; copy first part
	ld	hl, vxShaderGeneralInterpolation0
	ld	c, 26
	ldir			; copy constant part
; TODO : generation of the shading table
; VX_CALL1_NEG
	ld	c, (ix+3)
	ld	hl, VX_PIXEL_SHADER_CODE
	add	hl, bc
; VX_CALL0_NEG	
	ld	de, VX_PIXEL_SHADER_CODE
	ld	b, 160
	ld	iy, VX_LUT_PIXEL_LENGTH-(320*4)
vxShaderCreate0:
	ld	(iy+1), de
	ld	(iy+5), hl
	lea	iy, iy+8
	djnz vxShaderCreate0

	ld	a, (ix+3)
	inc	a
	add	a, a
	add	a, VX_PIXEL_SHADER_CODE%256
	ld	l, a
	ld	(iy+1), hl
	ld	(vxShaderJump), hl
	lea	iy, iy+4

; de = VX_CALL1_POS
	ld	bc, 0
	ld	c, (ix+3)
	dec	bc
	ld	hl, VX_PIXEL_SHADER_CODE
	add	hl, bc
	ld	(vxShaderAdress0), hl
	ex	de, hl
; hl = VX_CALL0_POS
	ld	hl, VX_PIXEL_SHADER_CODE
	add	hl, bc
	add	hl, bc
	inc	hl
	ld	(vxShaderAdress1), hl
	ld	b, 160
vxShaderCreate1:
	ld	(iy+1), de
	ld	(iy+5), hl
	lea	iy, iy+8
	djnz vxShaderCreate1
	ret
vxShaderGeneralInterpolation0:
	ld	hl, (iy+VX_REGISTER1)
	ld	de, (iy+VX_REGISTER0)
	add	hl, de
	add	hl, hl
	add	hl, hl
	ld	b, (hl)
	inc	hl
	ld	ix, (hl)
	ld	hl, (iy+VX_REGISTER2)	; v
	exx
	ld	hl, (iy+VX_REGISTER3)	; u
	exx
	lea	iy, iy+VX_REGISTER_SIZE
	jp	(ix)
; exactly 26 bytes
