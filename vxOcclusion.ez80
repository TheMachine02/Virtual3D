vxTestBoundingBox:
; 8 vertices forming a bounding box (which might not be aligned)
; transform the 8 vertices and test against the frustrum
; iy - vertices, ix - matrix

	ret
vxInsideFrustrum:
; return (a=$FF : true /a=0 false)
; (iy is point)
	xor	a, a	
	bit	7, (iy+8)
	ret	nz
	ld	bc, (iy+6)
	ld	hl, (iy+0)
	bit	7, (iy+2) 
	jr	z, vxInsideAbs0
	ex	de, hl
	sbc	hl, hl
	sbc	hl, de
vxInsideAbs0:
	or	a, a
	sbc	hl, bc
	ret	p
	ld	hl, (iy+3)
	bit	7, (iy+5) 
	jr	z, vxInsideAbs1
	ex	de, hl
	sbc	hl, hl
	sbc	hl, de
vxInsideAbs1:
	or	a, a
	sbc	hl, bc
	ret	p
	or	a, $FF
	ret


vxClipFrustrumCode:

	ld	bc, (iy+6)
	ld	hl, (iy+0)

	xor	a, a
	add	hl, hl
	jr	nc, $+8
	rla
	ex   de, hl
	sbc   hl, hl
	sbc   hl, de

	sbc	hl, bc
	or	a, a
	sbc	hl, bc
	jp	m, vxProjectNoClipY
   rrca
   ccf
   rra
vxProjectNoClipY:
; what did I said ?


vxProjectClipXTest:
   ld hl, (iy+VX_VERTEX_RX)
   bit 7,(iy+VX_VERTEX_RX+2)
   jr z, vxProjectClipXAbs
   ex de, hl
   sbc   hl, hl
   sbc   hl, de
vxProjectClipXAbs:
   rra
   sbc   hl, bc
   jr   c, vxProjectClipXIn
   rlca
   rrca
   ccf
   rra
	jr	vxPerspectiveEnd
vxProjectClipXIn:
   rra
   and   %00110000
	jr	vxPerspectiveEnd
vxProjectClipX:
   rrca
   ccf
   rra
vxPerspectiveEnd:
  bit 7,(iy+VX_VERTEX_RZ+2)
  jr	z, $+4
   or  %00001000
	ld	(iy+VX_VERTEX_CODE), a
	lea	de, iy+VX_GLOBAL_VCACHE_SIZE
	pop	iy
	ret



vxClipFrustrumCode:
	ld	hl, (iy+VX_VERTEX_RY)
	ld	de, (iy+VX_VERTEX_RX)
	ld	bc, (iy+VX_VERTEX_RZ)
	xor	a, a
	sbc	hl, bc
	jp	p, vxPerspectiveError0
	add	hl, bc
	or	a, a
	adc	hl, bc
	jp	m, vxPerspectiveError1
; y cliping was handled
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jp	p, vxPerspectiveError2
	add	hl, bc
	or	a, a
	adc	hl, bc
	jp	m, vxPerspectiveError3
	ret
vxPerspectiveError0:
; y up
	ld	a, %10000000
	jr	vxPerspectiveTestX
vxPerspectiveError1:
	ld	a, %01000000
vxPerspectiveTestX:
	ex	de, hl
	sra	a
	rra
	sbc	hl, bc
	jp	m, vxPerspectiveError2
	or	a, %10000000	
vxPerspectiveError2:
	add	hl, bc
	or	a, a
	adc	hl, bc
	jp	p, vxPerspectiveError3
	or	a, %01000000
vxPerspectiveError3:
vxPerspectiveErrorEnd:
	bit	7, (iy+VX_VERTEX_RZ+2)
	ret	z
	or	%00001000
	ret