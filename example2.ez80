#include	"vx3D.inc"

#define	DELTA	4096

.org userMem - 2
.db tExtTok, tAsm84CeCmp
.assume ADL=1


	ld	hl, VertexName
	call	vxMemoryFind
	ret	c
	ld	(Vertex), hl

	ld	hl, TriangleName
	call	vxMemoryFind
	ret	c
	ld	(Triangle), hl

	ld	hl, TextureName
	call	vxMemoryFind
	ret	c
	ld	(Texture), hl

; init the virtual 3d library
	call	vxEngineInit
	ret	c		; quit if error at init

	ld	hl, (Texture)
	ld	a, VX_ZX7_COMPRESSED
	ld	de, $D30000
	call	vxImageCopy

; setup global variable for rendering, euler angle and the translation of WorldMatrix

	ld	hl, 0
	ld	(EulerAngle), hl
	ld	(LightAngle), hl

	ld	ix, WorldMatrix
	lea	hl, ix+0
	call	vxMatrixLoadIdentity
	ld	hl, 65536
	ld	(ix+15), hl		; Z translation of the matrix

	ld	hl, Light
	ld	de, vxLightUniform
	ld	bc, VX_LIGHT_SIZE
	ldir

	ld	ix, SHADER
	call	vxShaderLoad

MainLoop:
	call	vxTimerStart

;	call	Random
;	ld	a, l
;	and	31
;	add	a, 224
;	ld	(vxLightUniform+4), a

	ld	hl, (EulerAngle)
	ld	iy, Quaternion
	ld	ix, UnitVector
	call	vxQuaternionRotationAxis
	ld	ix, WorldMatrix
	call	vxQuaternionGetMatrix
	lea	iy, ix+0
	ld	ix, ScaleMatrix
	ld	hl, WorldMatrix
	call	vxMatrixMlt


	ld	a, VX_GEOMETRY_TI9
	ld	ix, WorldMatrix
	ld	iy, ModelMatrix
	ld	bc, $D21000
	ld	hl, (Vertex)
	ld	de, (Triangle)
	call	vxGeometryStream

	ld	hl, (vxGeometrySize)
	ld	(triangle_count), hl

	call	vxCmdDepthSort

	ld	c, $00
	call	vxClearBuffer
	call	vxRenderStream
; timer & counter

	ld	bc, 320*8-1
	ld	de, (vxFramebuffer)
	or	a, a
	sbc	hl, hl
	add	hl, de
	inc	de
	ld	(hl), 0
	ldir

	ld	hl, 0
	ld	(TextXPos_SMC), hl
	ld	a, 0
	ld	(TextYPos_SMC), a
	call	vxTimerRead
; do (ade/256)/187
	ld	(Temp), de
	ld	(Temp+3), a

	ld	de, (Temp+1)
; divide de by 187
	ex	de, hl
	ld	bc, 187
	call	__idivs_ASM
	ld	de, 4
	push	de
	push	hl
	call	_PrintUInt
	pop	de
	pop	hl

	ld	hl, (TextXPos_SMC)
	ld	de, 8
	add	hl, de
	ld	(TextXPos_SMC), hl

triangle_count=$+1
	ld	hl, 0
	ld	de, 4
	push	de
	push	hl
	call	_PrintUInt
	pop	de
	pop	hl

	call	vxFlushLCD

;	call	vxWaitVsync
;	ld	a, $2A
;	call	vxSpiCmd
;	ld	a, $0
;	call	vxSpiParam
;	ld	a, $0
;	call	vxSpiParam
;	ld	a, $01
;	call	vxSpiParam
;	ld	a, $3F
;	call	vxSpiParam
;	call	vxWaitVsync

KeyboardTest:
	ld hl,$F50000
	ld (hl),2
	xor a,a
kwait:
	cp a,(hl)
	jr nz,kwait

	ld	de, 8
	ld	a, ($F5001E)
	bit	1, a
	jr	z, _kskip
	ld	hl, (EulerAngle)
	add	hl, de
	ld	(EulerAngle), hl
_kskip:
	ld	de, -8
	ld	a, ($F5001E)
	bit	2, a
	jr	z, _kskip2
	ld	hl, (EulerAngle)
	add	hl, de
	ld	(EulerAngle), hl
_kskip2:
	ld	a, ($F5001E)
	bit	0, a
	jr	z, _kskip5
	ld	hl, (WorldMatrix+12)
	ld	de, DELTA
	add	hl, de
	ld	(WorldMatrix+12), hl
_kskip5:

	ld	a, ($F5001E)
	bit	3, a
	jr	z, _kskip6
	ld	hl, (WorldMatrix+12)
	ld	de, -DELTA
	add	hl, de
	ld	(WorldMatrix+12), hl
_kskip6:

	ld	hl, (WorldMatrix+15)

	ld	a, ($F50012)
	bit	0,a
	jr	z, _kskip3
	ld	de, DELTA
	add	hl, de
_kskip3:

	bit	4,a
	jr	z, _kskip4
	ld	de, -DELTA
	add	hl, de
_kskip4:

	ld	(WorldMatrix+15), hl

	ld a,($F5001C)
	bit 6,a

	jp	z, MainLoop
	ret

Random:
    ld ix, rand1
    ld hl, (ix)
    ld de, (ix+3)
    ld b, h
    ld c, l
    add hl, hl
    rl e
    rl d
    add hl, hl
    rl e
    rl d
    inc l
    add hl, bc
    ld (ix), hl
    adc hl, de
    ld (ix+3), hl
    ex de, hl
    ld hl, (ix+6)
    ld bc, (ix+9)
    add hl, hl
    rl c
    rl b
    ld (ix+9), bc
    sbc a, a
    and %11000101
    xor l
    ld l, a
    ld (ix+6), hl
    ex de, hl
    add hl, bc
    ret
rand1:
.fill	12

#include	"vxMain.ez80"
#include	"graphics_lib.asm"

posX:
	.dw	0
posY:
	.dw	0
posZ:
	.dw	0
Temp:
	.dl	0,0

; choose mateus or tonberry

VertexName:
	.db	AppVarObj, "FRAN0",0
Vertex:
	.dl	0
TriangleName:
	.db	AppVarObj, "FRAN1", 0
Triangle:
	.dl	0
TextureName:
	.db	AppVarObj, "FRAN3", 0
Texture:
	.dl	0
Light:
	.db	0,0,-64
	.db	2
	.db	255
	.dw	0,0,0

ScaleMatrix:
	.db	77,0,0		; 44
	.db	0,102,0		; 58
	.db	0,0,64		; 37
UnitVector:
	.dl	0,16384,0
Quaternion:
	.dl	0,0,0,0
QuatMatrix:
	.dl	0,0,0,0,0,0
WorldMatrix:
	.dl	0,0,0,0,0,0
ModelMatrix:
	.db	64,0,0
	.db	0,64,0
	.db	0,0,64
	.dw	0,0,0
EulerAngle:
	.dl	0,0,0
LightAngle:
	.dl	0,0,0


SHADER:
#include	"alpha.vsl"
