#include	"vxTimer.ez80"
#include	"vxRaster.ez80"
#include	"vxMatrix.ez80"
#include	"vxQuaternion.ez80"
#include	"vxVector.ez80"
#include	"vxFramebuffer.ez80"
#include	"vxClipping.ez80"
#include	"vxPipeline.ez80"
#include	"vxMemory.ez80"
#include	"vxPostProcessing.ez80"
#include	"vxImage.ez80"
#include	"vxShaderInterpolation.ez80"
#include	"vxData.inc"

; functions

vxEngineInit:
; get indic off
	call	_RunIndicoff
; disable interrupt and start LCD interrupt
	call	_boot_ClearVRAM
	di
	ld	a, (VX_LCD_IMSC)
	or	%00000100
	ld	(VX_LCD_IMSC), a

; setup 8bpp mode
	ld a,VX_BPP8
	ld	(VX_LCD_CTRL),a
; load vram buffer
	ld	hl, VX_FRAMEBUFFER_AUX0
	ld	(VX_LCD_BUFFER), hl
	ld	hl, VX_FRAMEBUFFER_AUX1
	ld	(vxFramebuffer), hl


	ld	iy, VX_GEOMETRY_QUEUE
	ld	(vxSubmissionQueue), iy
	ld	hl, VX_BATCH_DATA
	ld	(vxBatchData), hl
	or	a, a
	sbc	hl, hl
	ld	(vxGeometrySize), hl
;;	ld	hl, 0E00005h
;;;	ld	(hl), 2	; Set flash wait states to 5 + 1 = 6 (total access time = 7)
	call	vxCreateMemoryPool

	ld	hl,0D18879h
	ld	de,0C90611h
	ld	(hl),de
	dec	hl
	ld	(hl),0EDh
	push	hl
	inc	d
	call	0D18878h
	pop	hl

#define	VX_COLOR_LUT	$D00000
#define	VX_SIN_TABLE	$D02000

	ld	hl, VX_COLOR_LUT_DATA
	ld	de, VX_COLOR_LUT
	ld	bc, 8192
	ldir
	ld	hl, VX_SIN_LUT_DATA
	ld	de, VX_SIN_TABLE
	ld	bc, 512
	ldir

	call	vxResetPalette
; insert stack position
	ld	hl, vxEngineQuit
	ex	(sp), hl
	jp	(hl)
vxEngineQuit:
	ld	a, $D0
	.db	$ED,$6D
	ld hl,$F50000
	xor a		; Mode 0
	ld (hl),a
	inc l		; 0F50001h
	ld (hl),15	; Wait 15*256 APB cycles before scanning each row
	inc l		; 0F50002h
	xor a
	ld (hl),a
 	inc l		; 0F50003h
	ld (hl),15	; Wait 15 APB cycles before each scan
	inc l		; 0F50004h
	ld a,8		; Number of rows to scan
	ld (hl),a
	inc l		; 0F50005h
	ld (hl),a	; Number of columns to scan
	ld iy, OS__FLAGS
	ld a, VX_BPP16
	ld (VX_LCD_CTRL),a
	ld	hl, VX_FRAMEBUFFER_AUX0
	ld	(VX_LCD_BUFFER), hl

	call	vxDestroyMemoryPool

	call _HomeUp
	call _Clrscrn
	call _DrawStatusBar
	call _RunIndicon
	ei
	jp _DrawBatteryIndicator
